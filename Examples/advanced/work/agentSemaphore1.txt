:- use_module(library(aggregate)).

:- dynamic(strada_libera/1).
:- dynamic(macchina/2).

:- 
    write('Sono un semaforo!').

initE:>
    messageA(agentCar1, send_message(init(1), Me)),
    messageA(agentCar2, send_message(init(2), Me)),
    messageA(agentCar3, send_message(init(3), Me)),
    messageA(agentCar4, send_message(init(4), Me)),
    messageA(agentCar5, send_message(init(5), Me)),
    messageA(agentCar6, send_message(init(6), Me)),
    messageA(agentCar7, send_message(init(7), Me)),
    assertz(strada_libera(true)).

/* ricezione richiesta di attraversamento, potrebbe essere sufficiente aggiungere la macchina all KB */
richiesta_attraversamentoE(Id):>
    now(Timestamp),
    assertz(macchina(Id, Timestamp)),
    format('LA MACCHINA CON id ~w HA CHIESTO DI ATTRAVERSARE AL TEMPO ~2f', [Id, Timestamp]), nl.

/* seleziono la macchina successiva */
elabora_codaA:-
    write('LA STRADA E LIBERA, QUINDI ELABORO LA CODA'), nl,
    macchina(Id,Timestamp),
    not((macchina(_,OtherTimestamp), OtherTimestamp < Timestamp)),
    format('MACCHINA SUCCESSIVA: ~d', Id), nl,
    retract(strada_libera(true)),
    assertz(strada_libera(false)),
    concedi_autorizzazioneA(Id).
    

/* comunico alla macchina successiva di poter attraversare incrocio */
concedi_autorizzazioneA(Id):-
    format('CONCEDO AUTORIZZAZIONE ALLA MACCHINA CON ID ~d', Id), nl,
    number_chars(Id, App),
    atom_chars(IdString, App),
    atom_concat('agentCar', IdString, AgentName),
    messageA(AgentName, send_message(test, Me)).

/* ricezione termine attraversamento, dire alla macchina successiva che può attraversare */
termine_attraversamentoE(Id):> 
    retract(macchina(Id,_)),
    format('LA MACCHINA CON ID ~d HA TERMINATO DI ATTRAVERSARE', Id), nl,
    retract(strada_libera(false)),
    assertz(strada_libera(true)).

strada_libera :-
    write('').

/* se la strada è libera */
strada_liberaI :-
    strada_libera(X),
    true == X,
    macchina(Id,Timestamp),
    elabora_codaA.    