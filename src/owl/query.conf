"SUBCLASS".
"ASK { ?S rdfs:subClassOf ?P. FILTER ( ( isIri(?S) && REGEX(str(?S), \"[/ #]%$\",\"i\") ) ). FILTER ( ( isIri(?P) && REGEX(str(?P), \"[/ #]%$\",\"i\") ) || ( isLiteral(?P) && REGEX(str(?P), \"^%$\",\"i\") ) ). }".
"SUBPROPERTY".
"ASK { ?S rdfs:subPropertyOf ?P. FILTER ( ( isIri(?S) && REGEX(str(?S), \"[/ #]%$\",\"i\") ) ). FILTER ( ( isIri(?P) && REGEX(str(?P), \"[/ #]%$\",\"i\") ) || ( isLiteral(?P) && REGEX(str(?P), \"^%$\",\"i\") ) ). }".
"EQ_PROPERTY".
"SELECT ?O WHERE { ?S owl:equivalentProperty ?O. FILTER ( ( isIri(?S) && REGEX(str(?S), \"[/ #]%$\",\"i\") ) ). }".
"SAME_AS".
"SELECT ?O WHERE { ?S owl:sameAs ?O. FILTER ( ( isIri(?S) && REGEX(str(?S), \"[/ #]%$\",\"i\") ) ). }".
"EQ_CLASS".
"SELECT ?O WHERE { ?S owl:equivalentClass ?O. FILTER ( ( isIri(?S) && REGEX(str(?S), \"[/ #]%$\",\"i\") ) ). }".
"SYMMETRIC".
"ASK { ?S rdf:type owl:SymmetricProperty. FILTER ( ( isIri(?S) && REGEX(str(?S), \"[/ #]%$\",\"i\") ) ). }".
"CERCA_VINI".
"SELECT DISTINCT $Property $Value1 WHERE { $Pasto rdf:type $Type. $Entity1 owl:allValuesFrom $Type. $Entity2 rdf:first $Entity1. $Entity3 rdf:rest $Entity2. $Course owl:intersectionOf $Entity3; rdfs:subClassOf [ rdf:type owl:Restriction; owl:onProperty food:hasDrink; owl:allValuesFrom [ rdf:type owl:Restriction; owl:onProperty $Property; owl:hasValue $Value ] ]. $Value owl:sameIndividualAs $Value1. FILTER  ( REGEX(str($Pasto), \"[/ #]%$\",\"i\") ). } ORDER BY DESC($Property)".
"PROP_VINI".
"SELECT DISTINCT $Wine WHERE { $Wine vin:hasBody <%>; vin:hasColor <%>; vin:hasFlavor <%>; vin:hasSugar <%>. }".
"PROP_VINI2".
"SELECT DISTINCT $Wine WHERE { $Wine % }".
