:-dynamic winner/2.
:-dynamic n_auction/1.
trusted(auctioneer).
ally(sue).
winner(0,0).
n_auction(0).

/*This agent always bids the value 6 and exults when it won*/

new_auctionE(N) :> retract(n_auction(_)), assert(n_auction(N)),
		agent(M),messageA(auctioneer,send_message(place_bid(6,M,N),M)), write(' bidded '),write('6').

/*Event to assert the winner in the case that the confirm message does not work*/
announce_winnerE(W,N) :> assert(winner(W,N)).

/*Internal Event that makes the agent exults when it knows it is the winner.
It exults every 60 seconds if no other auction starts in the meantime (Past event default storing policy)*/
exult(N) :-  agent(Me), n_auction(N), \+ exultP(N), winner(Me,N).
exultI(N) :- write('I won! Yeah ;)'),nl.
