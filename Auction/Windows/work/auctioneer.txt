:-dynamic state/2.
:-dynamic n_auction/1.
:-dynamic winner/2.
:-dynamic max_bid/1.
ally(auctioneer).
trusted(user).
trusted(bob).
trusted(jim).
trusted(sue).
state(0,0).
n_auction(0).
max_bid(0).
winner(0,0).

start_auctionE :>n_auction(P), N is P+1, retract(n_auction(_)),assert(n_auction(N)),assert(state(0,N)),
		write('start new auction received'),nl,
		write('auction number: '),write(N),
		agent(Me),
		messageA(bob,send_message(new_auction(N),Me)),
		messageA(jim,send_message(new_auction(N),Me)),
		messageA(sue,send_message(new_auction(N),Me)).


place_bidE(Value,Player,N) :> place(Value,Player,N), n_auction(N).

place(Value,Player,N) :- store_winnerA(Value,Player,N).
store_winner(Value,Player,N) :< max_bid(Maxvalue),Value > Maxvalue,
			write(Player),write(' has bidded '), write(Value),write(' in auction '),write(N),nl,
			retract(max_bid(_)),retract(winner(_,_)), assert(max_bid(Value)),assert(winner(Player,N)).

place(Value,Player,N) :- write(Player),write(' has bidded '), write(Value),write(' in auction '), write(N),nl.


communicate_winner(W,N) :- place_bidP(X,P1,N), place_bidP(Z,P2,N), place_bidP(Q,P3,N),
		P1 \== P2, P2 \== P3, P3 \== P1, n_auction(N), winner(W,N),
		state(0,N), retract(state(_,N)),assert(state(1,N)).

communicate_winnerI(W,N) :> agent(Me),
		messageA(bob,send_message(announce_winner(W,N),Me)),
		messageA(jim,send_message(announce_winner(W,N),Me)),
		messageA(sue,send_message(announce_winner(W,N),Me)),
		retract(max_bid(_)),assert(max_bid(0)),
		nl,write('winner '),write(W),write(' announced to all'),nl.
