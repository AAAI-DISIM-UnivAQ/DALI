 :-dynamic state/2. :-dynamic n_auction/1. :-dynamic winner/2. :-dynamic max_bid/1. ally(auctioneer). trusted(user). trusted(bob). trusted(jim). trusted(sue). state(0,0). n_auction(0). max_bid(0). winner(0,0). eve(start_auction):-n_auction(P),N is P+1,retract(n_auction(_)),assert(n_auction(N)),assert(state(0,N)),write('start new auction received'),nl,write('auction number: '),write(N),agent(Me),a(message(bob,send_message(new_auction(N),Me))),a(message(jim,send_message(new_auction(N),Me))),a(message(sue,send_message(new_auction(N),Me))). eve(place_bid(Value,Player,N)):-place(Value,Player,N),n_auction(N). place(Value,Player,N):-a(store_winner(Value,Player,N)). cd(store_winner(Value,Player,N)):-max_bid(Maxvalue),Value>Maxvalue,write(Player),write(' has bidded '),write(Value),write(' in auction '),write(N),nl,retract(max_bid(_)),retract(winner(_,_)),assert(max_bid(Value)),assert(winner(Player,N)). place(Value,Player,N):-write(Player),write(' has bidded '),write(Value),write(' in auction '),write(N),nl. communicate_winner(W,N):-evp(place_bid(X,P1,N)),evp(place_bid(Z,P2,N)),evp(place_bid(Q,P3,N)),P1\==P2,P2\==P3,P3\==P1,n_auction(N),winner(W,N),state(0,N),retract(state(_,N)),assert(state(1,N)). evi(communicate_winner(W,N)):-agent(Me),a(message(bob,send_message(announce_winner(W,N),Me))),a(message(jim,send_message(announce_winner(W,N),Me))),a(message(sue,send_message(announce_winner(W,N),Me))),retract(max_bid(_)),assert(max_bid(0)),nl,write('winner '),write(W),write(' announced to all'),nl. told(From,send_message(M)):-ally(From). told(From,send_message(M)):-trusted(From). told(Ag,execute_proc(_)):-true. told(Ag,query_ref(_,_)):-true. told(Ag,agree(_)):-true. told(Ag,confirm(_),200):-true. told(Ag,disconfirm(_)):-true. told(Ag,request(_,_)):-true. told(Ag,propose(_,_)):-true. told(Ag,accept_proposal(_,_),20):-true. told(Ag,reject_proposal(_,_),20):-true. told(_,failure(_,_),200):-true. told(_,cancel(_)):-true. told(Ag,inform(_,_),70):-true. told(Ag,inform(_),70):-true. told(Ag,reply(_)):-true. told(_,refuse(_,Xp)):-functor(Xp,Fp,_),Fp=agree. tell(To,From,send_message(M)):-true. tell(To,_,confirm(_)):-true. tell(To,_,disconfirm(_)):-true. tell(To,_,propose(_,_)):-true. tell(To,_,request(_,_)):-true. tell(To,_,execute_proc(_)):-true. tell(To,_,agree(_)):-true. tell(To,_,reject_proposal(_,_)):-true. tell(To,_,accept_proposal(_,_)):-true. tell(To,_,failure(_,_)):-true. tell(To,_,query_ref(_,_)):-true. tell(To,_,eve(_)):-true. tell(_,_,refuse(X,_)):-functor(X,F,_),(F=send_message;F=query_ref). tell(To,_,inform(_,M)):-true;M=motivation(refused_message). tell(To,_,inform(_)):-true,To\=user. tell(To,_,propose_desire(_,_)):-true. meta(P,V,AgM):-functor(P,F,N),N=0,clause(agent(Ag),_),clause(ontology(Pre,[Rep,Host],Ag),_),if((eq_property(F,V,Pre,[Rep,Host]);same_as(F,V,Pre,[Rep,Host]);eq_class(F,V,Pre,[Rep,Host])),true,if(clause(ontology(PreM,[RepM,HostM],AgM),_),if((eq_property(F,V,PreM,[RepM,HostM]);same_as(F,V,PreM,[RepM,HostM]);eq_class(F,V,PreM,[RepM,HostM])),true,false),false)). meta(P,V,AgM):-functor(P,F,N),(N=1;N=2),clause(agent(Ag),_),clause(ontology(Pre,[Rep,Host],Ag),_),if((eq_property(F,H,Pre,[Rep,Host]);same_as(F,H,Pre,[Rep,Host]);eq_class(F,H,Pre,[Rep,Host])),true,if(clause(ontology(PreM,[RepM,HostM],AgM),_),if((eq_property(F,H,PreM,[RepM,HostM]);same_as(F,H,PreM,[RepM,HostM]);eq_class(F,H,PreM,[RepM,HostM])),true,false),false)),P=..L,substitute(F,L,H,Lf),V=..Lf. meta(P,V,_):-functor(P,F,N),N=2,symmetric(F),P=..L,delete(L,F,R),reverse(R,R1),append([F],R1,R2),V=..R2. meta(P,V,AgM):-clause(agent(Ag),_),functor(P,F,N),N=2,(symmetric(F,AgM);symmetric(F)),P=..L,delete(L,F,R),reverse(R,R1),clause(ontology(Pre,[Rep,Host],Ag),_),if((eq_property(F,Y,Pre,[Rep,Host]);same_as(F,Y,Pre,[Rep,Host]);eq_class(F,Y,Pre,[Rep,Host])),true,if(clause(ontology(PreM,[RepM,HostM],AgM),_),if((eq_property(F,Y,PreM,[RepM,HostM]);same_as(F,Y,PreM,[RepM,HostM]);eq_class(F,Y,PreM,[RepM,HostM])),true,false),false)),append([Y],R1,R2),V=..R2. meta(P,V,AgM):-clause(agent(Ag),_),clause(ontology(Pre,[Rep,Host],Ag),_),functor(P,F,N),N>2,if((eq_property(F,H,Pre,[Rep,Host]);same_as(F,H,Pre,[Rep,Host]);eq_class(F,H,Pre,[Rep,Host])),true,if(clause(ontology(PreM,[RepM,HostM],AgM),_),if((eq_property(F,H,PreM,[RepM,HostM]);same_as(F,H,PreM,[RepM,HostM]);eq_class(F,H,PreM,[RepM,HostM])),true,false),false)),P=..L,substitute(F,L,H,Lf),V=..Lf. meta(P,V,AgM):-clause(agent(Ag),_),clause(ontology(Pre,[Rep,Host],Ag),_),functor(P,F,N),N=2,P=..L,if((eq_property(F,H,Pre,[Rep,Host]);same_as(F,H,Pre,[Rep,Host]);eq_class(F,H,Pre,[Rep,Host])),true,if(clause(ontology(PreM,[RepM,HostM],AgM),_),if((eq_property(F,H,PreM,[RepM,HostM]);same_as(F,H,PreM,[RepM,HostM]);eq_class(F,H,PreM,[RepM,HostM])),true,false),false)),substitute(F,L,H,Lf),V=..Lf.
a(message(bob,send_message(new_auction(_877875),_877871))):-cd(message(bob,send_message(new_auction(_261),_257))),assert(do_action(message(bob,send_message(new_auction(_261),_257)),program)).
cd(message(bob,send_message(new_auction(_261),_257))):-true.
a(message(bob,send_message(announce_winner(_281,_261),_257))):-cd(message(bob,send_message(announce_winner(_281,_261),_257))),assert(do_action(message(bob,send_message(announce_winner(_281,_261),_257)),program)).
cd(message(bob,send_message(announce_winner(_281,_261),_257))):-true.
a(message(jim,send_message(new_auction(_261),_257))):-cd(message(jim,send_message(new_auction(_261),_257))),assert(do_action(message(jim,send_message(new_auction(_261),_257)),program)).
cd(message(jim,send_message(new_auction(_261),_257))):-true.
a(message(jim,send_message(announce_winner(_281,_261),_257))):-cd(message(jim,send_message(announce_winner(_281,_261),_257))),assert(do_action(message(jim,send_message(announce_winner(_281,_261),_257)),program)).
cd(message(jim,send_message(announce_winner(_281,_261),_257))):-true.
a(message(sue,send_message(new_auction(_261),_257))):-cd(message(sue,send_message(new_auction(_261),_257))),assert(do_action(message(sue,send_message(new_auction(_261),_257)),program)).
cd(message(sue,send_message(new_auction(_261),_257))):-true.
a(message(sue,send_message(announce_winner(_281,_261),_257))):-cd(message(sue,send_message(announce_winner(_281,_261),_257))),assert(do_action(message(sue,send_message(announce_winner(_281,_261),_257)),program)).
cd(message(sue,send_message(announce_winner(_281,_261),_257))):-true.
a(store_winner(_375,_377,_261)):-cd(store_winner(_375,_377,_261)),assert(do_action(store_winner(_375,_377,_261),program)).
eve_cond(start_auction):-cd(start_auction),eve(start_auction).
cd(start_auction):-true.
eve_cond(place_bid(_20731,_20733,_20735)):-cd(place_bid(_20731,_20733,_20735)),eve(place_bid(_20731,_20733,_20735)).
cd(place_bid(_20731,_20733,_20735)):-true.